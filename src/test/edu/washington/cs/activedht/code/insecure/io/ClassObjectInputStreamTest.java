package edu.washington.cs.activedht.code.insecure.io;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;

import edu.washington.cs.activedht.code.insecure.candefine.ActiveCode;
import edu.washington.cs.activedht.code.insecure.io.ClassObjectInputStream;
import edu.washington.cs.activedht.code.insecure.io.InputStreamSecureClassLoader;

import junit.framework.TestCase;

/**
 * Requires the data generated by
 * testdata/data/ClassObjectOutputStreamTestGenerator.java.
 * @author roxana
 *
 */
public class ClassObjectInputStreamTest extends TestCase {
	public static final String TEST_INSTANCE_FILENAME =
		"build/testdata/data/TestDataActiveCode.instance";
	public static final int OBJECT_VALUE = 10;
	
	@Override
	protected void setUp() { }
	
	@Override
	protected void tearDown() { }
	
	public void testReadWorksForLocallyUnknownClass() {
		InputStream is = null;
		try { is = new FileInputStream(TEST_INSTANCE_FILENAME); }
		catch (FileNotFoundException e1) {
			e1.printStackTrace();
			fail("Couldn't open test instance: " + TEST_INSTANCE_FILENAME);
		}
		
		ActiveCode deserialized_object = null;
		ClassObjectInputStream cois = null;
		try {
			cois = new ClassObjectInputStream(is,
				InputStreamSecureClassLoader.newInstance("host.com", 1024));
		} catch (Exception e) {
			e.printStackTrace();
			fail("Could not create ClassObjectInputStream.");
		}
		
		try { deserialized_object = (ActiveCode)cois.readObject(); }
		catch (Exception e) {
			e.printStackTrace();
			fail("Could not read object.");
		}
		
		assertTrue(deserialized_object.onTest(OBJECT_VALUE));
	}
	
	public void testReadFailsForUnknownClassWhenRegularInputStreamUsed() {
		InputStream is = null;
		try { is = new FileInputStream(TEST_INSTANCE_FILENAME); }
		catch (FileNotFoundException e1) {
			e1.printStackTrace();
			fail("Couldn't open test instance: " + TEST_INSTANCE_FILENAME);
		}
		
		ActiveCode deserialized_object = null;
		ObjectInputStream cois = null;
		try {
			cois = new ObjectInputStream(is);
		} catch (Exception e) {
			e.printStackTrace();
			fail("Could not create ClassObjectInputStream.");
		}
		
		try {
			deserialized_object = (ActiveCode)cois.readObject();
			fail("Deserialized ActiveCode object without specialized " +
				 "classloader.");
		}
		catch (ClassNotFoundException e) { }  // This error's what we expect.
		catch (IOException e) {
			e.printStackTrace();
			fail("IO Error reading object from input stream");
		}
		
		assertNull(deserialized_object);
	}
}
