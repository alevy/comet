#! /usr/bin/env bash

#
# Script for executing Vanish commands.
# Based on the Hadoop command script.
#
# Environment Variables:
#
#   JAVA_HOME        The java implementation to use.  Overrides JAVA_HOME.
#
#   VANISH_CLASSPATH  Extra Java CLASSPATH entries.
#
#   VANISH_HEAPSIZE   The maximum amount of heap to use, in MB. 
#                     Default is 1000.
#
#   VANISH_OPTS       Extra Java runtime options.
#
#   VANISH_CONF_DIR   Alternate conf dir. Default is ${VANISH_HOME}/conf.
#
#
# TODO(roxana): Make it run from Windows w/o cygwin.
#

bin=`dirname "$0"`
bin=`cd "$bin"; pwd`

# This will set VANISH_HOME, etc.
. "$bin"/vanish-config.sh

cygwin=false
case "`uname`" in
CYGWIN*) cygwin=true;;
esac

# if no args specified, show usage
if [ $# = 0 ]; then
  echo "Usage: vanish <command>"
  echo "where <command> is one of:"
  echo "  client           run the Vanish client"
  echo "  service          run the Vanish service" 
  echo " or"
  echo "  CLASSNAME        run the class named CLASSNAME"
  exit 1
fi

# get arguments
COMMAND=$1
shift

# Source the vanish-env.sh.  Will have JAVA_HOME defined.
if [ -f "${VANISH_CONF_DIR}/vanish-env.sh" ]; then
  . "${VANISH_CONF_DIR}/vanish-env.sh"
fi

# Some Java parameters.
if [ "$JAVA_HOME" != "" ]; then
  JAVA_HOME=$JAVA_HOME
fi
  
if [ "$JAVA_HOME" = "" ]; then
  echo "Error: JAVA_HOME is not set."
  exit 1
fi

JAVA=$JAVA_HOME/bin/java
JAVA_HEAP_MAX=-Xmx1000m 

# Check envvars which might override default args
if [ "$VANISH_HEAPSIZE" != "" ]; then
  # echo "run with heapsize $VANISH_HEAPSIZE"
  JAVA_HEAP_MAX="-Xmx""$VANISH_HEAPSIZE""m"
fi

# So that filenames w/ spaces are handled correctly in loops below.
IFS=

# CLASSPATH:

# CLASSPATH initially contains $VANISH_CONF_DIR. TODO(roxana): rm.
CLASSPATH="${VANISH_CONF_DIR}"
# For developers/experimenters, add vanish classes and apps to CLASSPATH.
if [ -d "$VANISH_HOME/build/classes" ]; then
  CLASSPATH=${CLASSPATH}:$VANISH_HOME/build/classes
fi
if [ -d "$VANISH_HOME/build/test" ]; then
  CLASSPATH=${CLASSPATH}:$VANISH_HOME/build/test
fi
if [ -d "$VANISH_HOME/build/expt/java" ]; then
  CLASSPATH=${CLASSPATH}:$VANISH_HOME/build/expt/java
fi

# For distributions, add vanish jar to CLASSPATH.
for f in $VANISH_HOME/dist/Vanish*.jar; do
  if [ -f $f ]; then
    CLASSPATH=${CLASSPATH}:$f;
  fi
done

# Add libs to CLASSPATH.
for f in $VANISH_HOME/lib/*.jar; do
  CLASSPATH=${CLASSPATH}:$f;
done

# Add user-specified CLASSPATH last.
if [ "$VANISH_CLASSPATH" != "" ]; then
  CLASSPATH=${CLASSPATH}:${VANISH_CLASSPATH}
fi

# LOGGING:

if [ "$VANISH_LOG_DIR" = "" ]; then
  VANISH_LOG_DIR="$VANISH_HOME/log"
fi
if [ "$VANISH_LOGFILE" = "" ]; then
  VANISH_LOGFILE='vanish.log'
fi

# Cygwin path translation.
if $cygwin; then
  CLASSPATH=`cygpath -p -w "$CLASSPATH"`
  VANISH_HOME=`cygpath -d "$VANISH_HOME"`
  VANISH_LOG_DIR=`cygpath -d "$VANISH_LOG_DIR"`
fi

# Restore ordinary behaviour.
unset IFS

# Figure out which class to run.
if [ "$COMMAND" = "client" ] ; then
  CLASS="edu.washington.cs.vanish.apps.VanishClientRunner"
elif [ "$COMMAND" = "service" ] ; then
  CLASS='edu.washington.cs.vanish.service.impl.VanishServer'
else
  CLASS=$COMMAND
fi

# Have JVM dump heap if we run out of memory.  Files will be 'launch directory'
# and are named like the following: java_pid21612.hprof. Apparently it doesn't
# 'cost' to have this flag enabled. Its a 1.6 flag only. See:
# http://blogs.sun.com/alanb/entry/outofmemoryerror_looks_a_bit_better 
VANISH_OPTS="$VANISH_OPTS -XX:+HeapDumpOnOutOfMemoryError"
VANISH_OPTS="$VANISH_OPTS -Dvanish.log.dir=$VANISH_LOG_DIR"
VANISH_OPTS="$VANISH_OPTS -Dvanish.home.dir=$VANISH_HOME"
VANISH_OPTS="$VANISH_OPTS -Dvanish.user.id=$VANISH_USER_ID"

# Run the command.
#echo "\"$JAVA\" $JAVA_HEAP_MAX $VANISH_OPTS -classpath \"$CLASSPATH\" $CLASS "$@""
exec "$JAVA" $JAVA_HEAP_MAX $VANISH_OPTS -classpath "$CLASSPATH" $CLASS "$@"

